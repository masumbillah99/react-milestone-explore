(Thinking in React way)

# why React !! what is react ? ?
=> React is a Javascript library for building user interface.
=> library === Reusable collection of codes (Library vs Framework)
=> Creator Jordan Walke ==> 2011 ==> FaxJS ==> 2013 ==> React JS 
=> For Reducing duplicate code AKA dom.
=> React is awesome because of developer experience.

# How React works?
=> Modular component library.
=> Replica of DOM ==> Virtual DOM ==> Very important (Real Life Example)
=> DOM is Fast Enough but Showing in the UI is slow.
=> Diffing Algo / Reconcilation

PART - TWO 
# Fundamentals of React !!
Components && JSX - Javascript XML.
=> What is Component? Functional Component ! Component vs React Element !
=> React.createComponent()
=> Return Single Element.
=> React.Fragment
=> 
=>
=>

# Tailwind CSS 

# React functional Component Life Cycle: 
1. Mounting
    - useState and useEffect are called during the mounting phase.
    - useState sets the initial state of the component.
    - useEffect is used to perform any side effects after the component has mounted.

2. Updating
    - Whenever the component state or props change, the component re-renders.
    - During the updating phase, useEffect is called again.
    - Any changes to the state or props can be handled here.

3. Unmounting
    - When the component is removed from the DOM, useEffect can be used for cleanup operations.
    - The cleanup function is called right before the component is unmounted.

***
    Note: The lifecycle diagram above applies to functional components that 
    use hooks. Without hooks, the lifecycle is simpler and does not have a 
    separate phase for useEffect.
***

ডাটা পাঠানোর জন্য ৩টা কাজ করতে হবেঃ
    ১) attribute হিসেবে পাঠাতে হবে।
    ২) props হিসেবে receive করতে হবে।
    ৩) দেখাতে হবে dynamically.
        যেমন ধরো, 
        <h2>{props.name}</h2>